Arunachala Siva Arunachala Ramana
groff -s -e -mm -Tpdf
nroff -s -e -mm
.so /home/rusi/bin/arunachala
.hy 0
.EQ
delim $$
.EN
.S +3
.ce
\fBA Thought-Dialogue with E. W. Dijkstra\fP
.S
.S +1
.ce 2
Rusi Mody
6th August 1997
.S 10 13


.if t .2C
\fBHaskeller\fP: Considering that mathematics, formalization, elegance,
provability and so on have been the hall-marks of your work, why do
you still stick to the antiquated imperative paradigm?
.br
\fBEWD\fP: What I am sticking to ... I am not very sure ... 
.br
It is very important to me that the language we use to talk in and
communicate with be perspicuous.  All expressions should
satisfy the Leibniz property that equals may be substituted for
equals, or, as you would say (\fIpompously\fP)
they should be referentially transparent,
functions should be first-class, (\fIend pompously\fP)
above all application plays the primary role ...
.br
\fBHaskeller\fP: WHOA! Hold it!  You are misappropriating our religion!  In
Haskell all expressions are referentially transparent and functions
are first-class.
.br
\fBEWD\fP: Maybe semantically.  Not syntactically.
.br
\fBHaskeller\fP: What do you mean by ``syntactically referentially opaque?''
.br
\fBEWD\fP: No I was not referring to referential transparency.  I was referring
to first-classness.
.br
\fBHaskeller\fP: You mean that in Haskell although functions are semantically
first-class they are not first-class syntactically?
.br
\fBEWD\fP: Yes.
.br
\fBHaskeller\fP: Can you explain this bizarre notion of yours?
.br
\fBEWD\fP: Well I'll try... You are so devoted to your favourite functional
language that if I show you the problem directly you will not be able
to see it... So let me start with trivial examples.  Let us take
school algebra.  Look at the expression $xy ~+~ 2xz$   What is between
$x$ and $y$?
.br
\fBHaskeller\fP: Nothing.
.br
\fBEWD\fP: But something is intended?  
.br
\fBHaskeller\fP: Of course!  Multiplication.
.br
\fBEWD\fP: Does your beloved Haskell allow such expressions?
.br
\fBHaskeller\fP: Of course not!
.br
\fBEWD\fP: Why?
.br
\fBHaskeller\fP: It is highly irregular \(mi for addition the symbol + but
for multiplication nothing.
.br
\fBEWD\fP: But the traditional mathematicians use this elision of
symbols?
.br
\fBHaskeller\fP: Maybe so.  But it compromises clean semantics and finally
first-classness.
.br
\fBEWD\fP: Why?
.br
\fBHaskeller\fP: The traditional mathematician would have trouble referring to
multiplication.  Either he would have to use a symbol that he does not
normally use or he would have to say, ``The nothing between $x$ and
$y$.''
.br
\fBEWD\fP: So semantics are not clean.  But how does that spoil
first-classness?
.br
\fBHaskeller\fP: If something has no syntactic form we cant talk of its semantic
properties.  At least in FORTRAN, Pascal or C we can say: ``+ and *
may not be passed into or returned from functions.''  How is the
traditional mathematician to say it?  ``The nothing between $x$ and $y$
\(em which, mind, is different from the nothing between $y$ and $+~~~$
\(em cannot be passed ...''?
.br
\fBEWD\fP: So if something is not syntax, it cannot denote.  If it cannot
denote, it cannot be first-class or otherwise. Right?
.br
\fBHaskeller\fP: Yes, but I don't see what that has to do with Haskell.
.br
\fBEWD\fP: All in good time.  But will you allow  me to
cite one more example \(mi concatenation in SNOBOL or awk?
.br
\fBHaskeller\fP: (\fIJumping\fP)  It is the same thing.  Elision denotes
string concatenation.  Since such concatenation is very frequent in these
languages, it may be convenient in the specialized context of these
languages but the same problems as with school-algebra arises.
Nothing is used to denote concatenation; hence we cannot talk of its
first-classness.
.br
\fBEWD\fP: Yet you claim that functions are first-class in your so-called
functional language?
.br
\fBHaskeller\fP: But of course!  Any identifier (including an operator symbol) can
denote a function.  And such a function may be passed in and returned
and stored and ...
.br
\fBEWD\fP: Slowly. Slowly. You are mouthing all the usual FP indoctrination
which is all very well.  But let us go back to our two examples.
.br
An important operator \(mi multiplication \(mi is elided from
arithmetic expressions.  That compromises first-classness. Right?
.br
\fBHaskeller\fP: Right.
.br
\fBEWD\fP: The most important operator in awk and SNOBOL is elided.  That
compromises first-classness. Right?
.br
\fBHaskeller\fP: Right.
.br
\fBEWD\fP: What is the most important operator in Haskell?
.br
\fBHaskeller\fP: (\fIBeaming\fP)  There is no `most-important-operator'
in Haskell.
Everything is equal. Everything is uniform.  That is first-classness.
.br
\fBEWD\fP: Spare me the advertisement.  Look before you brag. Look at the
Haskell expression
.in +2n
\fCmap (1 + ) xs \fP
.in
What is between \fC1\fP and \fC+\fP?
.br
\fBHaskeller\fP: Space.
.br
\fBEWD\fP: And what does it denote?
.br
\fBHaskeller\fP: Nothing.
.br
\fBEWD\fP: And what is between \fC+\fP and \fC)\fP?
.br
\fBHaskeller\fP: Space.
.br
\fBEWD\fP: And what does it denote?
.br
\fBHaskeller\fP: Nothing.
.br
\fBEWD\fP: And what is between \fCmap\fP and \fC(\fP?
.br
\fBHaskeller\fP: Space.
.br
\fBEWD\fP: And what does it denote?
.br
\fBHaskeller\fP: Application.
.br
\fBEWD\fP: Aha!  There you are!
.br
\fBHaskeller\fP: What do you mean ``There you are!''  Application is the most
important concept in functional programming languages.  How can you
write a program without it?
.br
\fBEWD\fP: (\fILaughing\fP) So there is a most important operator after all!
.br
\fBHaskeller\fP: (\fIIrritated\fP) Its not an operator.  Its the fundamental
glue for binding together any functional program.
.br
\fBEWD\fP: Just as concatenation is the glue in SNOBOL and awk?
.br
\fBHaskeller\fP: (\fIGulp\fP) Er ... I ... I am not sure what you are driving
at ...
.br
\fBEWD\fP: I am sorry to be harsh with you but the fact is that in Haskell,
functions are given poorer treatment than say in C.  In
C, as in traditional mathematics, at least the parenthesis surrounding the
parameter list denotes function application.  In Haskell you have
nothing.
.br
\fBHaskeller\fP: This is going too far.  You cannot handle a function in C with
anything like Haskell's power.  And you can never create a function at
all.
.br
\fBEWD\fP: (\fILaughing\fP) I was only pulling your leg.  In Haskell
nothing denotes application, in C (as in traditional mathematics)
parenthesisation is overloaded, sometimes it parenthesises, sometimes
it denotes function application.  Each is worse than the other.
Anyway we were talking of syntax, remember?
.br
.EQ
delim 
.EN
\fBHaskeller\fP: If its only a question of syntax then you can define an
apply operator. Hudak does it in the Haskell tutorial using a \fC$\fP. Thus:
.in +2n
\fCf $ x  =  f x\fP
.in
Then you can use \fC$\fP wherever you want to make application
explicit.
.br
\fBEWD\fP: Hmm...  can you write the definition?
.in +2n
\fClength$[] = 0\fP
.in
\fBHaskeller\fP: Of course.
.br
\fBEWD\fP: Are you sure?
.br
\fBHaskeller\fP: Yes.
.br
\fBEWD\fP: Then how does Haskell distinguish between the first
definition which defines \fC$\fP and the second which uses \fC$\fP to define
\fClength\fP?
.br
\fBHaskeller\fP: (\fIGulp\fP) Er... No you cannot use a \fC$\fP on the lhs.
.br
\fBEWD\fP: (\fILaughing\fP) So you are a traditional mathematician after
all.  Sometimes he writes xy, sometimes x \(mu y and sometimes
x cdot y.  In the same way you sometimes write \fCf x\fP and
sometimes \fCf$x\fP
.br
\fBHaskeller\fP: Well OK.  So what do you think the syntax should be?
.br
\fBEWD\fP: Simple. If application is the central concept in functional
programming languages and regularity is a cardinal design principle
(I hope it is!) then application must always be explicit.
.br
\fBHaskeller\fP: Do you want us to write?
.in +2n
\fClength$(x:xs)  = 1 + length$xs\fP
.in
\fBEWD\fP: Um...
.br
\fBHaskeller\fP: I find the \fC$\fPs ugly!
.br
\fBEWD\fP: The \fC$\fPs are your choice.
.br
\fBHaskeller\fP: (\fIExasperated\fP) But then what do you want?
.br
.EQ
delim $$
.EN
\fBEWD\fP: This is a question on design... Application must
show but it must not dominate.  This calls for an operator that even
when ubiquitous, will not overwhelm.
For myself, after I realised that functions and application are being given
second-class treatment in computing science, (and that is because of the
bad habits we inherit from mathematicians) I have
started using a dot for this purpose. Thus: $map.(1+).xs$ 
.br
\fBHaskeller\fP: Does not look very regular to me.  Why is there no dot between
$1$ and $+$?
.br
\fBEWD\fP: Oh that's easy. $map.((+).1).l$  In fact for any operator
$*$ we may define sections by postulating the following as equal.
.DS I
$x * y$
$(x *).y$
$(* y).x$
$(*).x.y$
.DE
We treat the others as short-forms for the last.
.br
\fBHaskeller\fP: I am somehow very uneasy ...
.br
\fBEWD\fP: Why?
.br
\fBHaskeller\fP: In Haskell we already use the dot for composition.
What do we do then for composition?
.br
\fBEWD\fP: Hmm ... As I said this is a matter of design ... I do not
know your Haskell very well but is it not true that you use
indentation to demarcate blocks, individual elements of blocks
and the like?
.br
\fBHaskeller\fP: (\fIWarily\fP) Yes, and what is wrong with that?
.br
\fBEWD\fP: O nothing! It is good, very good. A language that
makes clean programming mandatory is good.  I asked because
if the semicolon is free you could use it to denote composition,
you could even define it in diagrammatical order thus:
.in +2n
$(f;g).x ~=~ g.(f.x)$
.in
\fBHaskeller\fP: But the semicolon is not free, sorry.  It is allowed
as an explicit alternative to separate declarations.
.br
\fBEWD\fP: (\fIPuzzled\fP) But you just said that indentation is used for
that purpose?
.br
\fBHaskeller\fP: You may use indentation or you may use braces and
semicolons. Its the programmer's choice.
.br
\fBEWD\fP: (\fILaughing\fP) Like choosing a hot-dog or a sandwich at a
fast-food restaurant?
.br
\fBHaskeller\fP: What is wrong with allowing the programmer some
choice?
.br
\fBEWD\fP: Well then why not allow him some more choice? Like
assignments, pointers, gotos...?
.br
\fBHaskeller\fP: Ridicule me if you like ... Yes I've got it!
There is a serious problem with application as a first-class operator.
If application is
itself an operator it can itself be sectioned.  Then we are in trouble
if we listen to you.  Or are you suggesting that application be an
exception to the rule and not be allowed in sections?  That would be an
ugly wart on the face of Haskell.
.br
\fBEWD\fP:  I never suggested making application special.  Sectioning it
gives some nice results. Here is one:
.DS I
$~~f$
by eta
$=~lambda x -> f.x$
left sectioning the dot
$=~lambda x -> (f.).x$
by eta
$=~(f.)$
.DE

Here is another.
The function $pam$ (converse of $map$) has the following informal specification
.in +2n
$pam.x.[f sub 1 ,~f sub 2 ,...f sub n ] ^~=~^
  [f sub 1 .x,~f sub 2 .x,...f sub n .x]$
.in
Using the right-sectioned dot it is easily defined as:
.in +2n
$pam.x.fl ~~=~~ map.(.x).fl$
.in
It would be much harder to discover this if the application were not
evident in the specification.

Also the first result can be generalised as
.in +2n
$f ~=~ (f.) ~=~ ((f.).) ~=~ ...$
.in
\fBHaskeller\fP: $pam$ is nice but the last is horrible.
How do we implement it?
.br
\fBEWD\fP: Do you have trouble implementing $+$ just because
$x ~=~ x + 0 ~=~ x + 0 + 0 ~=~ ...$ ?
